<?php

namespace Yafimchik\PhpDashamail\Api;

use Yafimchik\PhpDashamail\Traits\ServiceTrait;

class TransactionalApi
{
    use ServiceTrait;

    /**
     * to – email-адрес получателя. В случае задания нескольких получателей разделяются через запятую. Возможен формат с именем, например, Даша Савицкая <dasha@dashamail.ru>
     * from_email – email-адрес отправителя. Важно! Обратный адрес, используемый в поле From («От кого»), должен быть подтвержден в разделе «Доставляемость» => «Подтвержденные отправители».
     * subject – заголовок «Тема письма». В случае, если в message передается ID рассылки, то параметр необязателен и подставляется из темы письма указанной рассылки. В параметре также допустим теги динамического контента.
     *
     * Optional:
     * message html-код сообщения или id рассылки или шаблона, откуда его взять
     * plain_text plain_text версия вашего письма. Если параметр не задан или пуст, будет сгенерирована автоматически из html.
     * multi_to если задан данный параметр, то при задании нескольких адресов в поле «Кому» (to) через запятую они будут отображаться в соответствующем заголовке письма. По-умолчанию – не отображаются.
     * from_name имя отправителя для заголовка «От кого»
     * cc email-адреса в поле «Копия». В случае задания нескольких получателей разделяются через запятую. Возможен формат с именем, например, Владимир Владимирович <putin@kremlin.ru>.
     * bcc email-адреса в поле «Скрытая копия». В случае задания нескольких получателей разделяются через запятую. Возможен формат с именем, например, Феликс Эдмундович <dzerzinksy@kgb.su>.
     * message_id id сообщения, по которому вы потом сможете идентифицировать вебхук. В случае задания нескольких получателей разделяются через запятую.
     * delivery_time timestamp времени, когда письмо должно быть доставлено.
     * replace сериализованный массив замен в шаблоне. Также может быть в формате JSON. В случае использования нескольких email-адресов в параметре to можно использовать ассоциативный массив с замен с email-адресами в качестве ключей.
     * domain домен отправки, который будет использоваться для DKIM/SPF подписей. По-умолчанию используется первый в списке в разделе «Аккаунт» => «Доставляемость» => «Настройка домена отправки (DKIM&SPF)»
     * stat_domain домен отслеживания статистики, который будет использоваться для подмены ссылок и пикселя отслеживания открытий. По-умолчанию используется первый в списке в разделе «Аккаунт» => «Доставляемость» => «Настройка домена статистики»
     * campaign_id пользовательский id кампании для группировки статистики по транзакционным письмам
     * no_track_opens передается для отключения трекинга открытий.
     * no_track_clicks передается для отключения трекинга (подмены) ссылок.
     * headers JSON-объект, содержащий произвольные заголовки письма. Например, {"Reply-To":"Test Reply <testreply@example.ru>", "CustomHeader": "any value"}
     * template_data - JSON-объект, содержащий данные для условных операторов {{}}. Например, {"name":"Иван", "phone": "79999999999"}. Подробнее о динамическом контенте и условных операторах.
     * attachments – JSON-массив, содержащий прикладываемые файлы в base64-кодировке. Наример, [{"name": "image1.png", "filebody": "base64encoded_content_1"},{"name": "image2.png", "filebody": "base64encoded_content_2"}].
     * inline – JSON-массив, содержащий прикладываемые к письму изображения. Изображения размещаются внутри письма с помощью Content-ID идентификаторов, например, src="cid:<Content-ID>>". Объекты изображений в JSON-массиве передаются со следующими параметрами:
     * mime_type – MIME тип изображения, поддерживаются: image/jpeg, image/png и image/gif.
     * filename – файловое имя изображения, например, victory.png
     * body – base64-encoded содержимое файла картинки
     * cid – идентификатор Content-ID который добавлен в тело письма для подстановки
     * ignore_delivery_policy передается для игнорирования единой политики коммуникаций на аккаунте.
     *
     * @param string $to
     * @param string $from_email
     * @param string $subject
     * @param array $params
     * @return void
     *
     * @see https://dashamail.ru/transactional/
     */

    public function send(string $to, string $from_email, string $subject, array $params = [])
    {
        $params = array_merge(['to' => $to, 'from_email' => $from_email, 'subject' => $subject], $params);

        return $this->sendData('lists.add', $params);
    }
}
